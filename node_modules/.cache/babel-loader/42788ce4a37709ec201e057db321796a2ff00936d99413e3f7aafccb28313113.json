{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NOIR\\\\dynamic-list-manager\\\\src\\\\components\\\\ListManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ListManager.css\"; // Import styling file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ListManager = () => {\n  _s();\n  const [items, setItems] = useState([]); // Store list items\n  const [inputValue, setInputValue] = useState(\"\"); // Track user input\n\n  const handleInputChange = event => {\n    setInputValue(event.target.value); // Update state when user types\n  };\n  const handleAddItem = () => {\n    if (inputValue.trim() === \"\") return; // Prevent empty submissions\n    setItems([...items, inputValue]); // Add item to list\n    setInputValue(\"\"); // Clear input field after adding\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"list-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dynamic List Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange,\n        placeholder: \"Enter an item...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddItem,\n        children: \"Add Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-container\",\n      children: items.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(ListManager, \"4ElIvbS62IQ4ioRx1XNQfOmnA6w=\");\n_c = ListManager;\nexport default ListManager;\nvar _c;\n$RefreshReg$(_c, \"ListManager\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ListManager","_s","items","setItems","inputValue","setInputValue","handleInputChange","event","target","value","handleAddItem","trim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","item","index","_c","$RefreshReg$"],"sources":["C:/Users/NOIR/dynamic-list-manager/src/components/ListManager.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ListManager.css\"; // Import styling file\r\n\r\nconst ListManager = () => {\r\n  const [items, setItems] = useState([]); // Store list items\r\n  const [inputValue, setInputValue] = useState(\"\"); // Track user input\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value); // Update state when user types\r\n  };\r\n\r\n  const handleAddItem = () => {\r\n    if (inputValue.trim() === \"\") return; // Prevent empty submissions\r\n    setItems([...items, inputValue]); // Add item to list\r\n    setInputValue(\"\"); // Clear input field after adding\r\n  };\r\n\r\n  return (\r\n    <div className=\"list-manager\">\r\n      <h2>Dynamic List Manager</h2>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Enter an item...\"\r\n        />\r\n        <button onClick={handleAddItem}>Add Item</button>\r\n      </div>\r\n      <ul className=\"list-container\">\r\n        {items.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListManager; \r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD,MAAMS,iBAAiB,GAAIC,KAAK,IAAK;IACnCF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACrC,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIN,UAAU,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC;IACtCR,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEE,UAAU,CAAC,CAAC,CAAC,CAAC;IAClCC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,oBACEN,OAAA;IAAKa,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3Bd,OAAA;MAAAc,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BlB,OAAA;MAAKa,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9Bd,OAAA;QACEmB,IAAI,EAAC,MAAM;QACXT,KAAK,EAAEL,UAAW;QAClBe,QAAQ,EAAEb,iBAAkB;QAC5Bc,WAAW,EAAC;MAAkB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC,eACFlB,OAAA;QAAQsB,OAAO,EAAEX,aAAc;QAAAG,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACNlB,OAAA;MAAIa,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC3BX,KAAK,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBzB,OAAA;QAAAc,QAAA,EAAiBU;MAAI,GAAZC,KAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CAjCID,WAAW;AAAAyB,EAAA,GAAXzB,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}