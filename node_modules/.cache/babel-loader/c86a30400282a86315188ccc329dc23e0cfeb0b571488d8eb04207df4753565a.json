{"ast":null,"code":"import React,{useState}from\"react\";import\"./ListManager.css\";// Import styling file\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ListManager=()=>{const[items,setItems]=useState([]);// Store list items\nconst[inputValue,setInputValue]=useState(\"\");// Track user input\nconst handleInputChange=event=>{setInputValue(event.target.value);// Update state when user types\n};const handleAddItem=()=>{if(inputValue.trim()===\"\")return;// Prevent empty submissions\nsetItems([...items,inputValue]);// Add item to list\nsetInputValue(\"\");// Clear input field after adding\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"list-manager\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Dynamic List Manager\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputValue,onChange:handleInputChange,placeholder:\"Enter an item...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAddItem,children:\"Add Item\"})]}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-container\",children:items.map((item,index)=>/*#__PURE__*/_jsx(\"li\",{children:item},index))})]});};export default ListManager;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","ListManager","items","setItems","inputValue","setInputValue","handleInputChange","event","target","value","handleAddItem","trim","className","children","type","onChange","placeholder","onClick","map","item","index"],"sources":["C:/Users/NOIR/dynamic-list-manager/src/components/ListManager.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ListManager.css\"; // Import styling file\r\n\r\nconst ListManager = () => {\r\n  const [items, setItems] = useState([]); // Store list items\r\n  const [inputValue, setInputValue] = useState(\"\"); // Track user input\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value); // Update state when user types\r\n  };\r\n\r\n  const handleAddItem = () => {\r\n    if (inputValue.trim() === \"\") return; // Prevent empty submissions\r\n    setItems([...items, inputValue]); // Add item to list\r\n    setInputValue(\"\"); // Clear input field after adding\r\n  };\r\n\r\n  return (\r\n    <div className=\"list-manager\">\r\n      <h2>Dynamic List Manager</h2>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Enter an item...\"\r\n        />\r\n        <button onClick={handleAddItem}>Add Item</button>\r\n      </div>\r\n      <ul className=\"list-container\">\r\n        {items.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListManager; \r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,mBAAmB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE5B,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAAE;AACxC,KAAM,CAACQ,UAAU,CAAEC,aAAa,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAAE;AAElD,KAAM,CAAAU,iBAAiB,CAAIC,KAAK,EAAK,CACnCF,aAAa,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAE;AACrC,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,GAAIN,UAAU,CAACO,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,OAAQ;AACtCR,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAEE,UAAU,CAAC,CAAC,CAAE;AAClCC,aAAa,CAAC,EAAE,CAAC,CAAE;AACrB,CAAC,CAED,mBACEL,KAAA,QAAKY,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3Bf,IAAA,OAAAe,QAAA,CAAI,sBAAoB,CAAI,CAAC,cAC7Bb,KAAA,QAAKY,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9Bf,IAAA,UACEgB,IAAI,CAAC,MAAM,CACXL,KAAK,CAAEL,UAAW,CAClBW,QAAQ,CAAET,iBAAkB,CAC5BU,WAAW,CAAC,kBAAkB,CAC/B,CAAC,cACFlB,IAAA,WAAQmB,OAAO,CAAEP,aAAc,CAAAG,QAAA,CAAC,UAAQ,CAAQ,CAAC,EAC9C,CAAC,cACNf,IAAA,OAAIc,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAC3BX,KAAK,CAACgB,GAAG,CAAC,CAACC,IAAI,CAAEC,KAAK,gBACrBtB,IAAA,OAAAe,QAAA,CAAiBM,IAAI,EAAZC,KAAiB,CAC3B,CAAC,CACA,CAAC,EACF,CAAC,CAEV,CAAC,CAED,cAAe,CAAAnB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}